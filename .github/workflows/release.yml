name: Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: docker.io
  IMAGE_NAME: patient-management-system

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    name: Build and Release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd project
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run tests
      run: |
        cd project
        pytest test_app.py -v --cov=main
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          echo "version=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
        else
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./project
        file: ./project/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Generate release notes
      id: release_notes
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "release_notes=Manual release triggered for version ${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "release_notes=${{ github.event.release.body }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Create GitHub Release (if manual)
      if: github.event_name == 'workflow_dispatch'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: ${{ steps.release_notes.outputs.release_notes }}
        draft: false
        prerelease: false

  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: build-and-release
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying version ${{ needs.build-and-release.outputs.version }} to production..."
        # Add your production deployment commands here
        # For example:
        # - Update Kubernetes deployment
        # - Deploy to cloud service
        # - Update load balancer configuration
        
    - name: Post-deployment health check
      run: |
        echo "Running post-deployment health checks..."
        # Add health check commands here
        # For example:
        # curl -f https://your-app.com/health
        
    - name: Notify team
      run: |
        echo "âœ… Successfully deployed version ${{ needs.build-and-release.outputs.version }} to production!"
        # You can add Slack/Teams/Email notifications here
