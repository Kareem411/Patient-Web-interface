name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: patient-web-interface

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test and Lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd project
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run linting with flake8
      run: |
        cd project
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run tests with pytest
      run: |
        cd project
        pytest test_app.py -v --cov=main --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./project/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install safety
      run: pip install safety
      
    - name: Run security scan
      run: |
        cd project
        safety check -r requirements.txt

  build:
    runs-on: ubuntu-latest
    name: Build Docker Image
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./project
        file: ./project/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run Trivy vulnerability scanner
      if: github.event_name != 'pull_request'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      if: github.event_name != 'pull_request'
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # For example, updating a staging server or cloud service
        
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Kubernetes (Minikube)
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
      
    - name: Start Minikube
      uses: medyagh/setup-minikube@master
      with:
        driver: docker
        memory: 2048
        cpus: 2
      
    - name: Enable Minikube addons
      run: |
        minikube addons enable ingress
        minikube addons enable metrics-server
        minikube addons enable dashboard
    
    - name: Verify Minikube
      run: |
        minikube status
        kubectl cluster-info
        kubectl get nodes
      
    - name: Deploy to Kubernetes
      run: |
        cd k8s
        
        echo "üì¶ Applying Kubernetes manifests..."
        kubectl apply -f deployment.yaml
        kubectl apply -f ingress.yaml
        kubectl apply -f monitoring.yaml
        
        echo "‚è≥ Waiting for deployment to be ready..."
        kubectl wait --for=condition=available --timeout=300s deployment/patient-web-interface -n patient-web-interface
        
        echo "üìä Verifying deployment..."
        kubectl get pods -n patient-web-interface
        kubectl get services -n patient-web-interface
        kubectl get ingress -n patient-web-interface
      
    - name: Test Kubernetes deployment
      run: |
        echo "üß™ Testing application accessibility..."
        
        # Set up port forwarding in background
        kubectl port-forward service/patient-web-interface-service 8080:80 -n patient-web-interface &
        PF_PID=$!
        
        # Wait for port forwarding to be ready
        sleep 15
        
        # Test if application is responding
        if curl -f --max-time 30 http://localhost:8080; then
          echo "‚úÖ Application is accessible via port forwarding!"
        else
          echo "‚ùå Application is not accessible"
          kubectl logs -l app=patient-web-interface -n patient-web-interface --tail=50
          exit 1
        fi
        
        # Clean up port forwarding
        kill $PF_PID || true
      
    - name: Get deployment information
      run: |
        echo "üìã Deployment Summary:"
        kubectl get all -n patient-web-interface
        
        echo ""
        echo "üåê Access Information:"
        echo "‚Ä¢ Port Forward: kubectl port-forward service/patient-web-interface-service 8080:80 -n patient-web-interface"
        echo "‚Ä¢ Minikube Service: minikube service patient-web-interface-service -n patient-web-interface"
        echo "‚Ä¢ Dashboard: minikube dashboard"
        
        echo ""
        echo "üìä Resource Usage:"
        kubectl top pods -n patient-web-interface || echo "Metrics not available yet"
        
        echo ""
        echo "üîç HPA Status:"
        kubectl get hpa -n patient-web-interface

  notification:
    runs-on: ubuntu-latest
    name: Notify Deployment Status
    needs: [test, security, build, deploy-production]
    if: always()
    
    steps:
    - name: Notify deployment status
      if: github.event_name != 'pull_request'
      run: |
        echo "üìä CI/CD Pipeline Results:"
        echo "‚Ä¢ Tests: ${{ needs.test.result }}"
        echo "‚Ä¢ Security: ${{ needs.security.result }}"
        echo "‚Ä¢ Build: ${{ needs.build.result }}"
        echo "‚Ä¢ Kubernetes Deploy: ${{ needs.deploy-production.result }}"
        
        if [ "${{ needs.test.result }}" = "success" ] && [ "${{ needs.security.result }}" = "success" ] && [ "${{ needs.build.result }}" = "success" ] && [ "${{ needs.deploy-production.result }}" = "success" ]; then
          echo ""
          echo "üéâ SUCCESS: All jobs completed successfully!"
          echo "‚úÖ Application deployed to Kubernetes (Minikube)"
          echo "üåê Access via: kubectl port-forward service/patient-web-interface-service 8080:80 -n patient-web-interface"
        else
          echo ""
          echo "‚ùå FAILURE: Some jobs failed. Check the logs for details."
          echo "üìã Failed jobs:"
          [ "${{ needs.test.result }}" != "success" ] && echo "  ‚Ä¢ Tests"
          [ "${{ needs.security.result }}" != "success" ] && echo "  ‚Ä¢ Security scan"
          [ "${{ needs.build.result }}" != "success" ] && echo "  ‚Ä¢ Docker build"
          [ "${{ needs.deploy-production.result }}" != "success" ] && echo "  ‚Ä¢ Kubernetes deployment"
          exit 1
        fi
